const cors = require("cors");
var session = require("express-session");
const nodemailer = require('nodemailer');
const express = require("express");
const userRouter = require("./router/user");
const authRouter = require("./router/auth");
const adminRoutes = require("./routes/admin"); 
const tourRouter = require("./routes/tourRoutes");
const tourImageRouter = require("./routes/tourImageRoutes");
const pricingRouter = require("./routes/pricingRoutes");
const bookingRouter = require("./routes/bookingRoutes");
const routerDetail = require("./routes/tourDetailRoutes");
const postRouter = require("./routes/posts");
const path = require("path"); 
require("dotenv").config();
const multer = require("multer");
const bodyParser = require("body-parser");
const flash = require('connect-flash');
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER, // üëâ thay b·∫±ng email th·∫≠t
    pass: process.env.EMAIL_PASS,    // üëâ m·∫≠t kh·∫©u ·ª©ng d·ª•ng (App Password, kh√¥ng ph·∫£i m·∫≠t kh·∫©u Gmail th∆∞·ªùng)
  },
});

const app = express();
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

app.use(
  session({
    secret: "dc",
    resave: false,
    saveUninitialized: true,
    cookie: { 
      secure: false,
      maxAge: 24 * 60 * 60 * 1000
    }
  }),
);
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true })); 
app.use(express.static("public"));
const fs = require('fs');
const uploadDir = path.join(__dirname, 'public/uploads/tour-images');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// C·∫•u h√¨nh flash
app.use(flash());

// Middleware ƒë·ªÉ l√†m cho flash messages kh·∫£ d·ª•ng trong templates
app.use((req, res, next) => {
  res.locals.success_messages = req.flash('success');
  res.locals.error_messages = req.flash('error');
  // Truy·ªÅn th√¥ng tin user v√†o t·∫•t c·∫£ c√°c views
  res.locals.user = req.session.user;
  next();
});

// Routes
app.use("/auth", authRouter);
app.use("/tours", tourRouter);
app.use("/tour-images", tourImageRouter);
// app.use("/pricing", pricingRouter);
app.use("/users", userRouter);
app.use("/tour-details", routerDetail);
app.use("/admin", adminRoutes);
app.use("/bookings", bookingRouter);
app.use("/posts", postRouter);
app.get("/", (req, res) => {
  res.send("Hello");
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(500).send(`
    <h1>ƒê√£ x·∫£y ra l·ªói</h1>
    <p>${err.message}</p>
    <pre>${err.stack}</pre>
    <a href="javascript:history.back()">Quay l·∫°i</a>
  `);
});



app.post('/api/send-email', async (req, res) => {
  const { email } = req.body;

  try {
    await transporter.sendMail({
      from: '"My App" <son17042003@gmail.com>',
      to: email,
      subject: 'Xin ch√†o!',
      text: 'C·∫£m ∆°n b·∫°n ƒë√£ tin d√πng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. ·∫§n v√†o ƒë∆∞·ªùng d·∫´n n√†y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: https://gotravelfront.onrender.com/reset-password',
    });

    res.json({ success: true, message: 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i!' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: 'G·ª≠i email th·∫•t b·∫°i.' });
  }
});


const port = process.env.PORT || 3000;
app.listen(port, () =>
  console.log(`Server is running at http://localhost:${port}`)
);

